import socket
import concurrent.futures
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import json
import csv
import os

app = Flask(__name__)
CORS(app)

scan_history = []  # List to store scan results

def scan_port(ip, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    result = sock.connect_ex((ip, port))
    sock.close()
    return port if result == 0 else None

def scan_ports(ip, start_port, end_port):
    open_ports = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        futures = {executor.submit(scan_port, ip, port): port for port in range(start_port, end_port + 1)}
        for future in concurrent.futures.as_completed(futures):
            port = future.result()
            if port:
                open_ports.append(port)
    return open_ports

@app.route('/scan', methods=['POST'])
def scan():
    target = request.form['target']
    start_port = int(request.form['startPort'])
    end_port = int(request.form['endPort'])

    try:
        ip_address = socket.gethostbyname(target)
        open_ports = scan_ports(ip_address, start_port, end_port)

        # Create a result entry
        result = {
            "target": target,
            "ip": ip_address,
            "open_ports": open_ports,
            "start_port": start_port,
            "end_port": end_port
        }

        # Append to scan history
        scan_history.append(result)

        # Save to a JSON file
        with open('scan_history.json', 'w') as f:
            json.dump(scan_history, f)

        return jsonify({
            "message": f"Scanning {target}...",
            "ip": ip_address,
            "open_ports": open_ports
        })
    except socket.gaierror:
        return jsonify({"message": "Invalid domain or IP address."}), 400
    except Exception as e:
        return jsonify({"message": f"An error occurred: {str(e)}"}), 500

@app.route('/history', methods=['GET'])
def history():
    return jsonify(scan_history)

@app.route('/download', methods=['GET'])
def download():
    if not scan_history:
        return jsonify({"message": "No scan history available."}), 404

    # Define the filename
    filename = "scan_history.csv"

    # Create the CSV file
    with open(filename, mode='w', newline='') as csvfile:
        fieldnames = ['timestamp', 'target', 'ip', 'open_ports', 'start_port', 'end_port']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        for entry in scan_history:
            writer.writerow({
                "timestamp": entry.get('timestamp', ''),  # Add timestamp if available
                "target": entry['target'],
                "ip": entry['ip'],
                "open_ports": ', '.join(map(str, entry['open_ports'])),
                "start_port": entry['start_port'],
                "end_port": entry['end_port']
            })

    return send_file(filename, as_attachment=True)

@app.route('/test', methods=['GET'])
def test():
    return jsonify({"message": "Server is working!"})

if __name__ == '__main__':
    app.run(debug=True, port=5000)
